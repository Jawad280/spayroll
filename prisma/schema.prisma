// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  username    String    @unique
  companyName String
  password    String
  isAdmin     Boolean
  license     DateTime?
  createdAt   DateTime  @default(now())

  // Self-referential relationship
  adminId   String?
  admin     User?   @relation("UserToManagedUsers", fields: [adminId], references: [id])
  companies User[]  @relation("UserToManagedUsers")

  employees Employee[]
}

enum Nationality {
  SC        @map("SC")
  Foreigner @map("Foreigner")
  PR        @map("PR")
}

enum CitizenshipStatus {
  SCPR1     @map("SCPR1")
  SCPR2     @map("SCPR2")
  SCPR3     @map("SCPR3")
  Foreigner @map("Foreigner")
}

enum ModeOfPayment {
  Cheque      @map("Cheque")
  Cash        @map("Cash")
  BankDeposit @map("BankDeposit")
}

enum ContributionRate {
  FG        @map("FG")
  GG        @map("GG")
  Foreigner @map("Foreigner")
}

model Employee {
  id                     String            @id @default(uuid())
  name                   String
  NRIC                   String
  dob                    DateTime
  nationality            Nationality
  citizenshipStatus      CitizenshipStatus
  companyName            String
  designation            String
  ordinaryWage           Int
  additionalWage         Int
  allowance              Int
  otPay                  Int
  otHours                Int
  modeOfPayment          ModeOfPayment
  typeOfContributionRate ContributionRate?
  joinDate               DateTime
  isResigned             Boolean
  resignDate             DateTime?

  company   User?   @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId String?

  payslips Payslip[]

  @@unique([NRIC, companyId])
}

model Payslip {
  id                     String            @id @default(uuid())
  employeeCPF            Int
  employerCPF            Int
  totalCPF               Int
  other                  String?
  otherDeduction         Int
  monthYear              String
  dateOfPayment          DateTime
  ordinaryWage           Int
  additionalWage         Int
  allowance              Int
  otPay                  Int
  otHours                Int
  modeOfPayment          ModeOfPayment
  typeOfContributionRate ContributionRate
  name                   String
  NRIC                   String
  dob                    DateTime
  nationality            Nationality
  citizenshipStatus      CitizenshipStatus
  companyName            String
  designation            String
  joinDate               DateTime

  employee   Employee? @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employeeId String?

  @@unique([NRIC, monthYear, companyName])
}
